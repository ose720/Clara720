import java.security.Principal;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.spirngframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestPram;
import org.springframework.web.server.ResponseStatusException;

import com.mysite.sbb.answer.AnswerForm;
import com.mysite.sbb.user.SiteUserDto;
impoet com.mysite.sbb.user.UserService;

import lonbok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequestMapping("/question")
@RequiredArgConstructor
@Controller
public class QuestionController {

  private final QuestionService questionService;
  
  private final UserService userService;
  
  @RequestMapping("/list)
  public String list(Model model, @RequestParam(value ="page", defultValue = "0") int page,
          @RequestParam(value ="kw", defaultValue = "")String kw) {
      log.info("page:{}, kw:{}, page, kw);
      Page.info("page:{}, kw:{}", page, kw);
      Page<QuestionDto> paging = this.questionService.getList(page, kw);
      model.addAttribute("pageing",paging);
      model.addAttribute("kw",kw);
      return "question_list";
  }
  
  @RequestMapping(value="/detail/{id}")
  public String detail(Model model, @PathVarialble("id") Integer id, AnswerForm answerForm) {
      QuestionDto question = this.questionService.getQuestion(id);
      model.addAttribute("question", question);
      return "question_detail";
   }
   
   @PreAuthorize("isAuthenticated()")
   @GetMapping("/create")
   public String questionCreate(QuestionForm questionForm) { return "question_form"; }
   
   @PreAuthorize("isAuthenticated()")
   @PostMapping("/create")
   public String questionCreate(@Valid QustionForm questionForm,
          BindingResult bindingResult, Principal principal) {
      if (bindingResult.hasErrors()) {
          return "question_form";
      }
      SiteUserDto siteUserDto = this.userService.getUser(principal.getName());
      this.questionService.create(questionForm.getSubject(), questionForm.getContent(), siteUserDto);
      return "redirect:/question/list";
   }
   
   @PreAuthorize("isAuthenticated()")
   @GetMapping("/modify/{id})
   public String questionModify(QuestionForm questionForm, @PathVariable("id") Integer id, Principal principal) {
        QuetionDto questionDto = this.questionService.getQuestion(id);
        if(!questionDto.getAuthor().getUsername().equals(principal.getName())) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "수정권한이 없습니다.");
        }
        questionForm.setSubject(questionDto.getSubject());
        questionForm.setContent(questionDto.getContent());
        return "question_form";
    }
    
    @PreAuthorize("isAuthenticated()")
    @PostMapping("/modify/{id}")
    public String questionModify(@Valid QuestionForm questionForm, BindingResult bindingResult,
            Principal principal, @PathVariable("id") Integer id) {
        if(bindingResult.hasErrors()) {
          return "question_form";
        }
        this.qustionService.modify(questionDto, questionForm.getSubject(),questionForm.getContent());
        return String.format("redirect:/question/detail/%s", id);
    }
    
    @PreAuthorize("isAuthenticated()")
    @GetMapping("/delete/{id}")
    public String questionDelete(Principal principal, @PathVariable("id")Integer id) {
        QuestionDto questionDto = this.questionService.getQuestion(id);
        if(!qustionDto.getAuthor().getUsername().equals(principal.getName())) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "삭제권한이 없습니다.");
            }
            this.questionService.delete(questionDto);
            return "redirect:/";
      }
      
      @PreAuthorize("isAuthenticate()")
      @GetMapping("/vote/{id}")
      public String questionVote(Principal principal, @PathVariable("id") Integer id) {
          QuestionDto questionDto = this.questionService.getQuestion(id);
          SiteUserDto siteUserDto = this.userService.getUser(principal.getName());
          this.questionService.vote(questionDto, siteUserDto);
          return String.format("redirect:.question/detail/%s",id);
        }
      }
            
            
    
    
   
  
